/* tslint:disable */
/* eslint-disable */
/**
 * Mon API
 * Documentation de l'API de votre application.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20046 } from '../models';
import { InlineResponse20047 } from '../models';
import { InlineResponse20048 } from '../models';
import { InlineResponse20049 } from '../models';
import { InlineResponse2016 } from '../models';
import { InlineResponse40017 } from '../models';
import { InlineResponse40018 } from '../models';
import { InlineResponse401 } from '../models';
import { InlineResponse40422 } from '../models';
import { InlineResponse40423 } from '../models';
import { InlineResponse40424 } from '../models';
import { InlineResponse4222 } from '../models';
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new notification resource
         * @summary Create a new notification
         * @param {string} email 
         * @param {string} libelle 
         * @param {number} view 
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification: async (email: string, libelle: string, view: number, authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling createNotification.');
            }
            // verify required parameter 'libelle' is not null or undefined
            if (libelle === null || libelle === undefined) {
                throw new RequiredError('libelle','Required parameter libelle was null or undefined when calling createNotification.');
            }
            // verify required parameter 'view' is not null or undefined
            if (view === null || view === undefined) {
                throw new RequiredError('view','Required parameter view was null or undefined when calling createNotification.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createNotification.');
            }
            const localVarPath = `/api/notification/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }

            if (libelle !== undefined) { 
                localVarFormParams.append('libelle', libelle as any);
            }

            if (view !== undefined) { 
                localVarFormParams.append('view', view as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an notification resource
         * @summary Delete an notification
         * @param {string} authorization JWT token
         * @param {number} id ID of notification to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification: async (authorization: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deleteNotification.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteNotification.');
            }
            const localVarPath = `/api/notification/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all notification
         * @summary Get all notifications
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationIndex: async (authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling notificationIndex.');
            }
            const localVarPath = `/api/notification/findAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a notification's information
         * @summary Update notification's information
         * @param {string} libelle 
         * @param {number} view 
         * @param {string} email 
         * @param {string} authorization JWT token
         * @param {number} notificationId ID of notification to update in this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotification: async (libelle: string, view: number, email: string, authorization: string, notificationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'libelle' is not null or undefined
            if (libelle === null || libelle === undefined) {
                throw new RequiredError('libelle','Required parameter libelle was null or undefined when calling updateNotification.');
            }
            // verify required parameter 'view' is not null or undefined
            if (view === null || view === undefined) {
                throw new RequiredError('view','Required parameter view was null or undefined when calling updateNotification.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling updateNotification.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling updateNotification.');
            }
            // verify required parameter 'notificationId' is not null or undefined
            if (notificationId === null || notificationId === undefined) {
                throw new RequiredError('notificationId','Required parameter notificationId was null or undefined when calling updateNotification.');
            }
            const localVarPath = `/api/notification/update/{notificationId}`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (libelle !== undefined) { 
                localVarFormParams.append('libelle', libelle as any);
            }

            if (view !== undefined) { 
                localVarFormParams.append('view', view as any);
            }

            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific notification
         * @summary Get notification information
         * @param {string} authorization JWT token
         * @param {number} id ID of notification to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewNotification: async (authorization: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling viewNotification.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling viewNotification.');
            }
            const localVarPath = `/api/notification/findOne/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new notification resource
         * @summary Create a new notification
         * @param {string} email 
         * @param {string} libelle 
         * @param {number} view 
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNotification(email: string, libelle: string, view: number, authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2016>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).createNotification(email, libelle, view, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an notification resource
         * @summary Delete an notification
         * @param {string} authorization JWT token
         * @param {number} id ID of notification to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotification(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20049>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).deleteNotification(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of all notification
         * @summary Get all notifications
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationIndex(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20046>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).notificationIndex(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a notification's information
         * @summary Update notification's information
         * @param {string} libelle 
         * @param {number} view 
         * @param {string} email 
         * @param {string} authorization JWT token
         * @param {number} notificationId ID of notification to update in this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNotification(libelle: string, view: number, email: string, authorization: string, notificationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20048>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).updateNotification(libelle, view, email, authorization, notificationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about a specific notification
         * @summary Get notification information
         * @param {string} authorization JWT token
         * @param {number} id ID of notification to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewNotification(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20047>> {
            const localVarAxiosArgs = await NotificationApiAxiosParamCreator(configuration).viewNotification(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new notification resource
         * @summary Create a new notification
         * @param {string} email 
         * @param {string} libelle 
         * @param {number} view 
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification(email: string, libelle: string, view: number, authorization: string, options?: any): AxiosPromise<InlineResponse2016> {
            return NotificationApiFp(configuration).createNotification(email, libelle, view, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an notification resource
         * @summary Delete an notification
         * @param {string} authorization JWT token
         * @param {number} id ID of notification to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20049> {
            return NotificationApiFp(configuration).deleteNotification(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all notification
         * @summary Get all notifications
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationIndex(authorization: string, options?: any): AxiosPromise<InlineResponse20046> {
            return NotificationApiFp(configuration).notificationIndex(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a notification's information
         * @summary Update notification's information
         * @param {string} libelle 
         * @param {number} view 
         * @param {string} email 
         * @param {string} authorization JWT token
         * @param {number} notificationId ID of notification to update in this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotification(libelle: string, view: number, email: string, authorization: string, notificationId: number, options?: any): AxiosPromise<InlineResponse20048> {
            return NotificationApiFp(configuration).updateNotification(libelle, view, email, authorization, notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific notification
         * @summary Get notification information
         * @param {string} authorization JWT token
         * @param {number} id ID of notification to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewNotification(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20047> {
            return NotificationApiFp(configuration).viewNotification(authorization, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * Create a new notification resource
     * @summary Create a new notification
     * @param {string} email 
     * @param {string} libelle 
     * @param {number} view 
     * @param {string} authorization JWT token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public createNotification(email: string, libelle: string, view: number, authorization: string, options?: any) {
        return NotificationApiFp(this.configuration).createNotification(email, libelle, view, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an notification resource
     * @summary Delete an notification
     * @param {string} authorization JWT token
     * @param {number} id ID of notification to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public deleteNotification(authorization: string, id: number, options?: any) {
        return NotificationApiFp(this.configuration).deleteNotification(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of all notification
     * @summary Get all notifications
     * @param {string} authorization JWT token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notificationIndex(authorization: string, options?: any) {
        return NotificationApiFp(this.configuration).notificationIndex(authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a notification's information
     * @summary Update notification's information
     * @param {string} libelle 
     * @param {number} view 
     * @param {string} email 
     * @param {string} authorization JWT token
     * @param {number} notificationId ID of notification to update in this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public updateNotification(libelle: string, view: number, email: string, authorization: string, notificationId: number, options?: any) {
        return NotificationApiFp(this.configuration).updateNotification(libelle, view, email, authorization, notificationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a specific notification
     * @summary Get notification information
     * @param {string} authorization JWT token
     * @param {number} id ID of notification to get information for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public viewNotification(authorization: string, id: number, options?: any) {
        return NotificationApiFp(this.configuration).viewNotification(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
}
