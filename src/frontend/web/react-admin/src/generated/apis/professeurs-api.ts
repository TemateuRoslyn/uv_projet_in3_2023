/* tslint:disable */
/* eslint-disable */
/**
 * Mon API
 * Documentation de l'API de votre application.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
import { InlineResponse20062 } from '../models';
import { InlineResponse20063 } from '../models';
import { InlineResponse20064 } from '../models';
import { InlineResponse20065 } from '../models';
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 3c60453 (Closes #311 -Ajusting home page)
=======
import { InlineResponse20061 } from '../models';
import { InlineResponse20062 } from '../models';
import { InlineResponse20063 } from '../models';
<<<<<<< HEAD
<<<<<<< HEAD
=======
import { InlineResponse20064 } from '../models';
>>>>>>> 474c0a6 (Closes #303 - Personnel integrated and admin site change to match the context)
=======
import { InlineResponse20064 } from '../models';
import { InlineResponse20091 } from '../models';
>>>>>>> e2d508d (Closes #299 - admin api integrated)
>>>>>>> 65dfea4 (Closes #299 - admin api integrated)
=======
<<<<<<< HEAD
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
import { InlineResponse20092 } from '../models';
>>>>>>> 9edccb6 (Closes #303 - Personnel Api integrated)
>>>>>>> 7cda091 (Closes #303 - Personnel Api integrated)
=======
import { InlineResponse20061 } from '../models';
import { InlineResponse20062 } from '../models';
import { InlineResponse20063 } from '../models';
import { InlineResponse20064 } from '../models';
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
import { InlineResponse2019 } from '../models';
import { InlineResponse40024 } from '../models';
import { InlineResponse40025 } from '../models';
import { InlineResponse401 } from '../models';
import { InlineResponse40430 } from '../models';
import { InlineResponse40431 } from '../models';
import { InlineResponse40432 } from '../models';
<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
import { InlineResponse40445 } from '../models';
>>>>>>> e2d508d (Closes #299 - admin api integrated)
=======
<<<<<<< HEAD
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
import { InlineResponse40446 } from '../models';
>>>>>>> 9edccb6 (Closes #303 - Personnel Api integrated)
>>>>>>> 7cda091 (Closes #303 - Personnel Api integrated)
=======
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
import { InlineResponse4225 } from '../models';
/**
 * ProfesseursApi - axios parameter creator
 * @export
 */
export const ProfesseursApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new professor resource
         * @summary Create a new professorr
         * @param {string} email 
         * @param {string} firstName 
         * @param {string} lastName 
         * @param {string} dateDeNaissance 
         * @param {string} lieuDeNaissance 
         * @param {string} photo 
         * @param {string} sexe 
         * @param {string} telephone 
         * @param {string} statut 
         * @param {number} courId 
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfesseur: async (email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'firstName' is not null or undefined
            if (firstName === null || firstName === undefined) {
                throw new RequiredError('firstName','Required parameter firstName was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'lastName' is not null or undefined
            if (lastName === null || lastName === undefined) {
                throw new RequiredError('lastName','Required parameter lastName was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'dateDeNaissance' is not null or undefined
            if (dateDeNaissance === null || dateDeNaissance === undefined) {
                throw new RequiredError('dateDeNaissance','Required parameter dateDeNaissance was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'lieuDeNaissance' is not null or undefined
            if (lieuDeNaissance === null || lieuDeNaissance === undefined) {
                throw new RequiredError('lieuDeNaissance','Required parameter lieuDeNaissance was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'photo' is not null or undefined
            if (photo === null || photo === undefined) {
                throw new RequiredError('photo','Required parameter photo was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'sexe' is not null or undefined
            if (sexe === null || sexe === undefined) {
                throw new RequiredError('sexe','Required parameter sexe was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'telephone' is not null or undefined
            if (telephone === null || telephone === undefined) {
                throw new RequiredError('telephone','Required parameter telephone was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'statut' is not null or undefined
            if (statut === null || statut === undefined) {
                throw new RequiredError('statut','Required parameter statut was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'courId' is not null or undefined
            if (courId === null || courId === undefined) {
                throw new RequiredError('courId','Required parameter courId was null or undefined when calling createProfesseur.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createProfesseur.');
            }
            const localVarPath = `/api/professeurs/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }

            if (firstName !== undefined) { 
                localVarFormParams.append('firstName', firstName as any);
            }

            if (lastName !== undefined) { 
                localVarFormParams.append('lastName', lastName as any);
            }

            if (dateDeNaissance !== undefined) { 
                localVarFormParams.append('dateDeNaissance', dateDeNaissance as any);
            }

            if (lieuDeNaissance !== undefined) { 
                localVarFormParams.append('lieuDeNaissance', lieuDeNaissance as any);
            }

            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }

            if (sexe !== undefined) { 
                localVarFormParams.append('sexe', sexe as any);
            }

            if (telephone !== undefined) { 
                localVarFormParams.append('telephone', telephone as any);
            }

            if (statut !== undefined) { 
                localVarFormParams.append('statut', statut as any);
            }

            if (courId !== undefined) { 
                localVarFormParams.append('courId', courId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an professor resource
         * @summary Delete an professor
         * @param {string} authorization JWT token
         * @param {number} id ID of professor to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfesseur: async (authorization: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deleteProfesseur.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProfesseur.');
            }
            const localVarPath = `/api/professeurs/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all professeurs
         * @summary Get all professeurs
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        professeursIndex: async (authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling professeursIndex.');
            }
            const localVarPath = `/api/professeurs/findAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a professeur's information
         * @summary Update a professeur's information
         * @param {string} email 
         * @param {string} firstName 
         * @param {string} lastName 
         * @param {string} dateDeNaissance 
         * @param {string} lieuDeNaissance 
         * @param {string} photo 
         * @param {string} sexe 
         * @param {string} telephone 
         * @param {string} statut 
         * @param {number} courId 
         * @param {string} authorization JWT token
         * @param {number} professeurId ID of professeur to update in this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfesseur: async (email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'firstName' is not null or undefined
            if (firstName === null || firstName === undefined) {
                throw new RequiredError('firstName','Required parameter firstName was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'lastName' is not null or undefined
            if (lastName === null || lastName === undefined) {
                throw new RequiredError('lastName','Required parameter lastName was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'dateDeNaissance' is not null or undefined
            if (dateDeNaissance === null || dateDeNaissance === undefined) {
                throw new RequiredError('dateDeNaissance','Required parameter dateDeNaissance was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'lieuDeNaissance' is not null or undefined
            if (lieuDeNaissance === null || lieuDeNaissance === undefined) {
                throw new RequiredError('lieuDeNaissance','Required parameter lieuDeNaissance was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'photo' is not null or undefined
            if (photo === null || photo === undefined) {
                throw new RequiredError('photo','Required parameter photo was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'sexe' is not null or undefined
            if (sexe === null || sexe === undefined) {
                throw new RequiredError('sexe','Required parameter sexe was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'telephone' is not null or undefined
            if (telephone === null || telephone === undefined) {
                throw new RequiredError('telephone','Required parameter telephone was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'statut' is not null or undefined
            if (statut === null || statut === undefined) {
                throw new RequiredError('statut','Required parameter statut was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'courId' is not null or undefined
            if (courId === null || courId === undefined) {
                throw new RequiredError('courId','Required parameter courId was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling updateProfesseur.');
            }
            // verify required parameter 'professeurId' is not null or undefined
            if (professeurId === null || professeurId === undefined) {
                throw new RequiredError('professeurId','Required parameter professeurId was null or undefined when calling updateProfesseur.');
            }
            const localVarPath = `/api/professeurs/update/{professeurId}`
                .replace(`{${"professeurId"}}`, encodeURIComponent(String(professeurId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }

            if (firstName !== undefined) { 
                localVarFormParams.append('firstName', firstName as any);
            }

            if (lastName !== undefined) { 
                localVarFormParams.append('lastName', lastName as any);
            }

            if (dateDeNaissance !== undefined) { 
                localVarFormParams.append('dateDeNaissance', dateDeNaissance as any);
            }

            if (lieuDeNaissance !== undefined) { 
                localVarFormParams.append('lieuDeNaissance', lieuDeNaissance as any);
            }

            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }

            if (sexe !== undefined) { 
                localVarFormParams.append('sexe', sexe as any);
            }

            if (telephone !== undefined) { 
                localVarFormParams.append('telephone', telephone as any);
            }

            if (statut !== undefined) { 
                localVarFormParams.append('statut', statut as any);
            }

            if (courId !== undefined) { 
                localVarFormParams.append('courId', courId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific professeur
         * @summary Get professeur information
         * @param {string} authorization JWT token
         * @param {number} id ID of professeur to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewProfesseur: async (authorization: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling viewProfesseur.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling viewProfesseur.');
            }
            const localVarPath = `/api/professeurs/findOne/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfesseursApi - functional programming interface
 * @export
 */
export const ProfesseursApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new professor resource
         * @summary Create a new professorr
         * @param {string} email 
         * @param {string} firstName 
         * @param {string} lastName 
         * @param {string} dateDeNaissance 
         * @param {string} lieuDeNaissance 
         * @param {string} photo 
         * @param {string} sexe 
         * @param {string} telephone 
         * @param {string} statut 
         * @param {number} courId 
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2019>> {
            const localVarAxiosArgs = await ProfesseursApiAxiosParamCreator(configuration).createProfesseur(email, firstName, lastName, dateDeNaissance, lieuDeNaissance, photo, sexe, telephone, statut, courId, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an professor resource
         * @summary Delete an professor
         * @param {string} authorization JWT token
         * @param {number} id ID of professor to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
<<<<<<< HEAD
        async deleteProfesseur(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20065>> {
=======
        async deleteProfesseur(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20064>> {
>>>>>>> 65dfea4 (Closes #299 - admin api integrated)
=======
<<<<<<< HEAD
        async deleteProfesseur(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20065>> {
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
        async deleteProfesseur(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20064>> {
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
            const localVarAxiosArgs = await ProfesseursApiAxiosParamCreator(configuration).deleteProfesseur(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
>>>>>>> 7cda091 (Closes #303 - Personnel Api integrated)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
         * Delete an suggestion resource
         * @summary Delete an suggestion
         * @param {string} authorization JWT token
         * @param {number} id ID of suggestion to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
        async deleteSuggestion(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20091>> {
=======
        async deleteSuggestion(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20092>> {
>>>>>>> 7cda091 (Closes #303 - Personnel Api integrated)
            const localVarAxiosArgs = await ProfesseursApiAxiosParamCreator(configuration).deleteSuggestion(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
<<<<<<< HEAD
=======
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
<<<<<<< HEAD
=======
>>>>>>> 9edccb6 (Closes #303 - Personnel Api integrated)
>>>>>>> 7cda091 (Closes #303 - Personnel Api integrated)
=======
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
         * Retrieve a list of all professeurs
         * @summary Get all professeurs
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
<<<<<<< HEAD
        async professeursIndex(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20062>> {
=======
        async professeursIndex(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20061>> {
>>>>>>> 65dfea4 (Closes #299 - admin api integrated)
=======
<<<<<<< HEAD
        async professeursIndex(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20062>> {
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
        async professeursIndex(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20061>> {
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
            const localVarAxiosArgs = await ProfesseursApiAxiosParamCreator(configuration).professeursIndex(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a professeur's information
         * @summary Update a professeur's information
         * @param {string} email 
         * @param {string} firstName 
         * @param {string} lastName 
         * @param {string} dateDeNaissance 
         * @param {string} lieuDeNaissance 
         * @param {string} photo 
         * @param {string} sexe 
         * @param {string} telephone 
         * @param {string} statut 
         * @param {number} courId 
         * @param {string} authorization JWT token
         * @param {number} professeurId ID of professeur to update in this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        async updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20064>> {
=======
        async updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20063>> {
>>>>>>> 3c60453 (Closes #311 -Ajusting home page)
=======
        async updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20062>> {
=======
        async updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20063>> {
>>>>>>> e2d508d (Closes #299 - admin api integrated)
>>>>>>> 65dfea4 (Closes #299 - admin api integrated)
=======
<<<<<<< HEAD
        async updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20064>> {
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
        async updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20063>> {
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
            const localVarAxiosArgs = await ProfesseursApiAxiosParamCreator(configuration).updateProfesseur(email, firstName, lastName, dateDeNaissance, lieuDeNaissance, photo, sexe, telephone, statut, courId, authorization, professeurId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about a specific professeur
         * @summary Get professeur information
         * @param {string} authorization JWT token
         * @param {number} id ID of professeur to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
<<<<<<< HEAD
        async viewProfesseur(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20063>> {
=======
        async viewProfesseur(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20062>> {
>>>>>>> 65dfea4 (Closes #299 - admin api integrated)
=======
<<<<<<< HEAD
        async viewProfesseur(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20063>> {
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
        async viewProfesseur(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20062>> {
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
            const localVarAxiosArgs = await ProfesseursApiAxiosParamCreator(configuration).viewProfesseur(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProfesseursApi - factory interface
 * @export
 */
export const ProfesseursApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new professor resource
         * @summary Create a new professorr
         * @param {string} email 
         * @param {string} firstName 
         * @param {string} lastName 
         * @param {string} dateDeNaissance 
         * @param {string} lieuDeNaissance 
         * @param {string} photo 
         * @param {string} sexe 
         * @param {string} telephone 
         * @param {string} statut 
         * @param {number} courId 
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, options?: any): AxiosPromise<InlineResponse2019> {
            return ProfesseursApiFp(configuration).createProfesseur(email, firstName, lastName, dateDeNaissance, lieuDeNaissance, photo, sexe, telephone, statut, courId, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an professor resource
         * @summary Delete an professor
         * @param {string} authorization JWT token
         * @param {number} id ID of professor to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
        deleteProfesseur(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20065> {
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
=======
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
        deleteProfesseur(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20065> {
            return ProfesseursApiFp(configuration).deleteProfesseur(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
<<<<<<< HEAD
=======
>>>>>>> 7cda091 (Closes #303 - Personnel Api integrated)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
         * Delete an suggestion resource
         * @summary Delete an suggestion
         * @param {string} authorization JWT token
         * @param {number} id ID of suggestion to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
        deleteSuggestion(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20091> {
            return ProfesseursApiFp(configuration).deleteSuggestion(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
=======
<<<<<<< HEAD
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
        deleteSuggestion(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20092> {
            return ProfesseursApiFp(configuration).deleteSuggestion(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
>>>>>>> 9edccb6 (Closes #303 - Personnel Api integrated)
>>>>>>> 7cda091 (Closes #303 - Personnel Api integrated)
=======
        deleteProfesseur(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20064> {
            return ProfesseursApiFp(configuration).deleteProfesseur(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
         * Retrieve a list of all professeurs
         * @summary Get all professeurs
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
<<<<<<< HEAD
        professeursIndex(authorization: string, options?: any): AxiosPromise<InlineResponse20062> {
=======
        professeursIndex(authorization: string, options?: any): AxiosPromise<InlineResponse20061> {
>>>>>>> 65dfea4 (Closes #299 - admin api integrated)
=======
<<<<<<< HEAD
        professeursIndex(authorization: string, options?: any): AxiosPromise<InlineResponse20062> {
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
        professeursIndex(authorization: string, options?: any): AxiosPromise<InlineResponse20061> {
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
            return ProfesseursApiFp(configuration).professeursIndex(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a professeur's information
         * @summary Update a professeur's information
         * @param {string} email 
         * @param {string} firstName 
         * @param {string} lastName 
         * @param {string} dateDeNaissance 
         * @param {string} lieuDeNaissance 
         * @param {string} photo 
         * @param {string} sexe 
         * @param {string} telephone 
         * @param {string} statut 
         * @param {number} courId 
         * @param {string} authorization JWT token
         * @param {number} professeurId ID of professeur to update in this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): AxiosPromise<InlineResponse20064> {
=======
        updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): AxiosPromise<InlineResponse20063> {
>>>>>>> 3c60453 (Closes #311 -Ajusting home page)
=======
        updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): AxiosPromise<InlineResponse20062> {
=======
        updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): AxiosPromise<InlineResponse20063> {
>>>>>>> e2d508d (Closes #299 - admin api integrated)
>>>>>>> 65dfea4 (Closes #299 - admin api integrated)
=======
<<<<<<< HEAD
        updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): AxiosPromise<InlineResponse20064> {
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
        updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any): AxiosPromise<InlineResponse20063> {
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
            return ProfesseursApiFp(configuration).updateProfesseur(email, firstName, lastName, dateDeNaissance, lieuDeNaissance, photo, sexe, telephone, statut, courId, authorization, professeurId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific professeur
         * @summary Get professeur information
         * @param {string} authorization JWT token
         * @param {number} id ID of professeur to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
<<<<<<< HEAD
<<<<<<< HEAD
        viewProfesseur(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20063> {
=======
        viewProfesseur(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20062> {
>>>>>>> 65dfea4 (Closes #299 - admin api integrated)
=======
<<<<<<< HEAD
        viewProfesseur(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20063> {
>>>>>>> c89ec69 (Closes #315 - Suggestion notification added succesfully)
=======
        viewProfesseur(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20062> {
>>>>>>> 605364c (mainmaim)
>>>>>>> 9608888 (Closes #303 - Personnel Api integrated)
            return ProfesseursApiFp(configuration).viewProfesseur(authorization, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfesseursApi - object-oriented interface
 * @export
 * @class ProfesseursApi
 * @extends {BaseAPI}
 */
export class ProfesseursApi extends BaseAPI {
    /**
     * Create a new professor resource
     * @summary Create a new professorr
     * @param {string} email 
     * @param {string} firstName 
     * @param {string} lastName 
     * @param {string} dateDeNaissance 
     * @param {string} lieuDeNaissance 
     * @param {string} photo 
     * @param {string} sexe 
     * @param {string} telephone 
     * @param {string} statut 
     * @param {number} courId 
     * @param {string} authorization JWT token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfesseursApi
     */
    public createProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, options?: any) {
        return ProfesseursApiFp(this.configuration).createProfesseur(email, firstName, lastName, dateDeNaissance, lieuDeNaissance, photo, sexe, telephone, statut, courId, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an professor resource
     * @summary Delete an professor
     * @param {string} authorization JWT token
     * @param {number} id ID of professor to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfesseursApi
     */
    public deleteProfesseur(authorization: string, id: number, options?: any) {
        return ProfesseursApiFp(this.configuration).deleteProfesseur(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of all professeurs
     * @summary Get all professeurs
     * @param {string} authorization JWT token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfesseursApi
     */
    public professeursIndex(authorization: string, options?: any) {
        return ProfesseursApiFp(this.configuration).professeursIndex(authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a professeur's information
     * @summary Update a professeur's information
     * @param {string} email 
     * @param {string} firstName 
     * @param {string} lastName 
     * @param {string} dateDeNaissance 
     * @param {string} lieuDeNaissance 
     * @param {string} photo 
     * @param {string} sexe 
     * @param {string} telephone 
     * @param {string} statut 
     * @param {number} courId 
     * @param {string} authorization JWT token
     * @param {number} professeurId ID of professeur to update in this request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfesseursApi
     */
    public updateProfesseur(email: string, firstName: string, lastName: string, dateDeNaissance: string, lieuDeNaissance: string, photo: string, sexe: string, telephone: string, statut: string, courId: number, authorization: string, professeurId: number, options?: any) {
        return ProfesseursApiFp(this.configuration).updateProfesseur(email, firstName, lastName, dateDeNaissance, lieuDeNaissance, photo, sexe, telephone, statut, courId, authorization, professeurId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a specific professeur
     * @summary Get professeur information
     * @param {string} authorization JWT token
     * @param {number} id ID of professeur to get information for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfesseursApi
     */
    public viewProfesseur(authorization: string, id: number, options?: any) {
        return ProfesseursApiFp(this.configuration).viewProfesseur(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
}
