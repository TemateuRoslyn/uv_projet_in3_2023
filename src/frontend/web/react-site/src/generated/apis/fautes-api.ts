/* tslint:disable */
/* eslint-disable */
/**
 * Mon API
 * Documentation de l'API de votre application.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FautesCreateBody } from '../models';
import { InlineResponse20032 } from '../models';
import { InlineResponse20033 } from '../models';
import { InlineResponse20034 } from '../models';
import { InlineResponse20035 } from '../models';
import { InlineResponse20037 } from '../models';
import { InlineResponse4008 } from '../models';
import { InlineResponse401 } from '../models';
import { InlineResponse40414 } from '../models';
import { InlineResponse40415 } from '../models';
import { InlineResponse40417 } from '../models';
/**
 * FautesApi - axios parameter creator
 * @export
 */
export const FautesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Mistake resource
         * @summary Create a new Mistake
         * @param {FautesCreateBody} body 
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMistake: async (body: FautesCreateBody, authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMistake.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling createMistake.');
            }
            const localVarPath = `/api/fautes/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a mistake resource
         * @summary Delete a mistake
         * @param {string} authorization JWT token
         * @param {number} id ID of mistake to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMistake: async (authorization: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deleteMistake.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteMistake.');
            }
            const localVarPath = `/api/fautes/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all mistakes with associated eleves and regles
         * @summary Find all mistakes
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexFautes: async (authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling indexFautes.');
            }
            const localVarPath = `/api/fautes/findAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific mistake
         * @summary Get mistake information
         * @param {string} authorization JWT token
         * @param {number} id ID of Faute to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFaute: async (authorization: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling viewFaute.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling viewFaute.');
            }
            const localVarPath = `/api/fautes/findOne/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about all specific mistake to a student
         * @summary Get mistake information for a student
         * @param {string} authorization JWT token
         * @param {number} id ID of Eleve to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFauteEleve: async (authorization: string, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling viewFauteEleve.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling viewFauteEleve.');
            }
            const localVarPath = `/api/fautes/findAll/eleve/{eleveId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FautesApi - functional programming interface
 * @export
 */
export const FautesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new Mistake resource
         * @summary Create a new Mistake
         * @param {FautesCreateBody} body 
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMistake(body: FautesCreateBody, authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20035>> {
            const localVarAxiosArgs = await FautesApiAxiosParamCreator(configuration).createMistake(body, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a mistake resource
         * @summary Delete a mistake
         * @param {string} authorization JWT token
         * @param {number} id ID of mistake to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMistake(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20037>> {
            const localVarAxiosArgs = await FautesApiAxiosParamCreator(configuration).deleteMistake(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of all mistakes with associated eleves and regles
         * @summary Find all mistakes
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexFautes(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20032>> {
            const localVarAxiosArgs = await FautesApiAxiosParamCreator(configuration).indexFautes(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about a specific mistake
         * @summary Get mistake information
         * @param {string} authorization JWT token
         * @param {number} id ID of Faute to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFaute(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20033>> {
            const localVarAxiosArgs = await FautesApiAxiosParamCreator(configuration).viewFaute(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about all specific mistake to a student
         * @summary Get mistake information for a student
         * @param {string} authorization JWT token
         * @param {number} id ID of Eleve to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFauteEleve(authorization: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20034>> {
            const localVarAxiosArgs = await FautesApiAxiosParamCreator(configuration).viewFauteEleve(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FautesApi - factory interface
 * @export
 */
export const FautesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new Mistake resource
         * @summary Create a new Mistake
         * @param {FautesCreateBody} body 
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMistake(body: FautesCreateBody, authorization: string, options?: any): AxiosPromise<InlineResponse20035> {
            return FautesApiFp(configuration).createMistake(body, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a mistake resource
         * @summary Delete a mistake
         * @param {string} authorization JWT token
         * @param {number} id ID of mistake to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMistake(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20037> {
            return FautesApiFp(configuration).deleteMistake(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all mistakes with associated eleves and regles
         * @summary Find all mistakes
         * @param {string} authorization JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexFautes(authorization: string, options?: any): AxiosPromise<InlineResponse20032> {
            return FautesApiFp(configuration).indexFautes(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific mistake
         * @summary Get mistake information
         * @param {string} authorization JWT token
         * @param {number} id ID of Faute to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFaute(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20033> {
            return FautesApiFp(configuration).viewFaute(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about all specific mistake to a student
         * @summary Get mistake information for a student
         * @param {string} authorization JWT token
         * @param {number} id ID of Eleve to get information for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFauteEleve(authorization: string, id: number, options?: any): AxiosPromise<InlineResponse20034> {
            return FautesApiFp(configuration).viewFauteEleve(authorization, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FautesApi - object-oriented interface
 * @export
 * @class FautesApi
 * @extends {BaseAPI}
 */
export class FautesApi extends BaseAPI {
    /**
     * Create a new Mistake resource
     * @summary Create a new Mistake
     * @param {FautesCreateBody} body 
     * @param {string} authorization JWT token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FautesApi
     */
    public createMistake(body: FautesCreateBody, authorization: string, options?: any) {
        return FautesApiFp(this.configuration).createMistake(body, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a mistake resource
     * @summary Delete a mistake
     * @param {string} authorization JWT token
     * @param {number} id ID of mistake to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FautesApi
     */
    public deleteMistake(authorization: string, id: number, options?: any) {
        return FautesApiFp(this.configuration).deleteMistake(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of all mistakes with associated eleves and regles
     * @summary Find all mistakes
     * @param {string} authorization JWT token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FautesApi
     */
    public indexFautes(authorization: string, options?: any) {
        return FautesApiFp(this.configuration).indexFautes(authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a specific mistake
     * @summary Get mistake information
     * @param {string} authorization JWT token
     * @param {number} id ID of Faute to get information for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FautesApi
     */
    public viewFaute(authorization: string, id: number, options?: any) {
        return FautesApiFp(this.configuration).viewFaute(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about all specific mistake to a student
     * @summary Get mistake information for a student
     * @param {string} authorization JWT token
     * @param {number} id ID of Eleve to get information for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FautesApi
     */
    public viewFauteEleve(authorization: string, id: number, options?: any) {
        return FautesApiFp(this.configuration).viewFauteEleve(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
}
